create extension if not exists "http" with schema "extensions";

create extension if not exists "insert_username" with schema "extensions";

create extension if not exists "intarray" with schema "extensions";

create extension if not exists "moddatetime" with schema "extensions";

create extension if not exists "pgaudit" with schema "extensions";

create extension if not exists "plpgsql_check" with schema "extensions";


create table "public"."comment_likes" (
    "id" uuid not null default gen_random_uuid(),
    "post_id" uuid not null,
    "user_id" uuid not null
);


alter table "public"."comment_likes" enable row level security;

create table "public"."comments" (
    "comments" text,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "comment_nickname" text,
    "id" uuid,
    "comment_id" uuid not null default gen_random_uuid()
);


create table "public"."games" (
    "app_id" bigint not null,
    "name" character varying,
    "required_age" bigint,
    "is_free" boolean,
    "short_description" text,
    "header_image" character varying,
    "capsule_image" character varying,
    "website" character varying,
    "genres" character varying,
    "pcRequirements" jsonb
);


create table "public"."login" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now()
);


create table "public"."posts" (
    "category" text not null,
    "title" text not null,
    "image" text,
    "content" text not null,
    "game" text,
    "created_At" timestamp with time zone default (now() AT TIME ZONE 'utc'::text),
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid
);


create table "public"."replies" (
    "reply_text" text not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "comment_id" uuid not null
);


create table "public"."user_bookmarks" (
    "app_id" bigint not null,
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid not null
);


create table "public"."user_likes" (
    "user_id" uuid not null,
    "post_id" uuid not null
);


create table "public"."userinfo" (
    "email" text not null,
    "avatar_url" text,
    "nickname" text,
    "admin" boolean,
    "id" uuid not null,
    "profile" text,
    "createdAt" time with time zone,
    "genres" jsonb
);


CREATE UNIQUE INDEX "games_pkey" ON public.games USING btree (app_id);

CREATE UNIQUE INDEX comments_comment_id_key ON public.comments USING btree (comment_id);

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (comment_id);

CREATE UNIQUE INDEX login_pkey ON public.login USING btree (id);

CREATE UNIQUE INDEX posts_id_key ON public.posts USING btree (id);

CREATE UNIQUE INDEX posts_pkey ON public.posts USING btree (id);

CREATE UNIQUE INDEX replies_comment_id_key ON public.replies USING btree (comment_id);

CREATE UNIQUE INDEX reply_likes_pkey ON public.comment_likes USING btree (id);

CREATE UNIQUE INDEX user_bookmarks_pkey ON public.user_bookmarks USING btree (id);

CREATE UNIQUE INDEX userinfo_id_key ON public.userinfo USING btree (id);

CREATE UNIQUE INDEX userinfo_pkey ON public.userinfo USING btree (id);

alter table "public"."comment_likes" add constraint "reply_likes_pkey" PRIMARY KEY using index "reply_likes_pkey";

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."games" add constraint "games_pkey" PRIMARY KEY using index "games_pkey";

alter table "public"."login" add constraint "login_pkey" PRIMARY KEY using index "login_pkey";

alter table "public"."posts" add constraint "posts_pkey" PRIMARY KEY using index "posts_pkey";

alter table "public"."user_bookmarks" add constraint "user_bookmarks_pkey" PRIMARY KEY using index "user_bookmarks_pkey";

alter table "public"."userinfo" add constraint "userinfo_pkey" PRIMARY KEY using index "userinfo_pkey";

alter table "public"."comment_likes" add constraint "comment_likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) not valid;

alter table "public"."comment_likes" validate constraint "comment_likes_post_id_fkey";

alter table "public"."comment_likes" add constraint "comment_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES userinfo(id) not valid;

alter table "public"."comment_likes" validate constraint "comment_likes_user_id_fkey";

alter table "public"."comments" add constraint "comments_comment_id_key" UNIQUE using index "comments_comment_id_key";

alter table "public"."comments" add constraint "comments_id_fkey" FOREIGN KEY (id) REFERENCES posts(id) not valid;

alter table "public"."comments" validate constraint "comments_id_fkey";

alter table "public"."comments" add constraint "comments_user_id_fkey" FOREIGN KEY (user_id) REFERENCES userinfo(id) not valid;

alter table "public"."comments" validate constraint "comments_user_id_fkey";

alter table "public"."posts" add constraint "posts_id_key" UNIQUE using index "posts_id_key";

alter table "public"."posts" add constraint "posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES userinfo(id) ON DELETE CASCADE not valid;

alter table "public"."posts" validate constraint "posts_user_id_fkey";

alter table "public"."replies" add constraint "replies_comment_id_fkey" FOREIGN KEY (comment_id) REFERENCES comments(comment_id) not valid;

alter table "public"."replies" validate constraint "replies_comment_id_fkey";

alter table "public"."replies" add constraint "replies_comment_id_key" UNIQUE using index "replies_comment_id_key";

alter table "public"."replies" add constraint "replies_user_id_fkey" FOREIGN KEY (user_id) REFERENCES userinfo(id) not valid;

alter table "public"."replies" validate constraint "replies_user_id_fkey";

alter table "public"."user_bookmarks" add constraint "user_bookmarks_app_id_fkey" FOREIGN KEY (app_id) REFERENCES games(app_id) not valid;

alter table "public"."user_bookmarks" validate constraint "user_bookmarks_app_id_fkey";

alter table "public"."user_bookmarks" add constraint "user_bookmarks_user_id_fkey" FOREIGN KEY (user_id) REFERENCES userinfo(id) not valid;

alter table "public"."user_bookmarks" validate constraint "user_bookmarks_user_id_fkey";

alter table "public"."user_likes" add constraint "user_likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE not valid;

alter table "public"."user_likes" validate constraint "user_likes_post_id_fkey";

alter table "public"."user_likes" add constraint "user_likes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES userinfo(id) not valid;

alter table "public"."user_likes" validate constraint "user_likes_user_id_fkey";

alter table "public"."userinfo" add constraint "userinfo_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."userinfo" validate constraint "userinfo_id_fkey";

alter table "public"."userinfo" add constraint "userinfo_id_key" UNIQUE using index "userinfo_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
insert into public.userInfo(id, email, nickname, avatar_url)
values (new.id, new.email, new.raw_user_meta_data->>'displayName', new.raw_user_meta_data->>'avatar_url');
return new;
end;

$function$
;

create or replace view "public"."posts_with_count" as  SELECT posts.category,
    posts.title,
    posts.image,
    posts.content,
    posts.game,
    posts."created_At",
    posts.id,
    posts.user_id,
    count(user_likes.post_id) AS like_count,
    count(comments.comment_id) AS comment_count
   FROM ((posts
     LEFT JOIN user_likes ON ((posts.id = user_likes.post_id)))
     LEFT JOIN comments ON ((posts.id = comments.comment_id)))
  GROUP BY posts.id;


create or replace view "public"."posts_with_counts" as  SELECT posts.category,
    posts.title,
    posts.image,
    posts.content,
    posts.game,
    posts."created_At",
    posts.id,
    posts.user_id,
    count(user_likes.post_id) AS like_count,
    count(comments.id) AS comment_count
   FROM ((posts
     LEFT JOIN user_likes ON ((posts.id = user_likes.post_id)))
     LEFT JOIN comments ON ((posts.id = comments.id)))
  GROUP BY posts.id;


create or replace view "public"."posts_with_likes" as  SELECT posts.category,
    posts.title,
    posts.image,
    posts.content,
    posts.game,
    posts."created_At",
    posts.id,
    posts.user_id,
    count(user_likes.post_id) AS like_count
   FROM (posts
     LEFT JOIN user_likes ON ((posts.id = user_likes.post_id)))
  GROUP BY posts.id;


grant delete on table "public"."comment_likes" to "anon";

grant insert on table "public"."comment_likes" to "anon";

grant references on table "public"."comment_likes" to "anon";

grant select on table "public"."comment_likes" to "anon";

grant trigger on table "public"."comment_likes" to "anon";

grant truncate on table "public"."comment_likes" to "anon";

grant update on table "public"."comment_likes" to "anon";

grant delete on table "public"."comment_likes" to "authenticated";

grant insert on table "public"."comment_likes" to "authenticated";

grant references on table "public"."comment_likes" to "authenticated";

grant select on table "public"."comment_likes" to "authenticated";

grant trigger on table "public"."comment_likes" to "authenticated";

grant truncate on table "public"."comment_likes" to "authenticated";

grant update on table "public"."comment_likes" to "authenticated";

grant delete on table "public"."comment_likes" to "service_role";

grant insert on table "public"."comment_likes" to "service_role";

grant references on table "public"."comment_likes" to "service_role";

grant select on table "public"."comment_likes" to "service_role";

grant trigger on table "public"."comment_likes" to "service_role";

grant truncate on table "public"."comment_likes" to "service_role";

grant update on table "public"."comment_likes" to "service_role";

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

grant delete on table "public"."games" to "anon";

grant insert on table "public"."games" to "anon";

grant references on table "public"."games" to "anon";

grant select on table "public"."games" to "anon";

grant trigger on table "public"."games" to "anon";

grant truncate on table "public"."games" to "anon";

grant update on table "public"."games" to "anon";

grant delete on table "public"."games" to "authenticated";

grant insert on table "public"."games" to "authenticated";

grant references on table "public"."games" to "authenticated";

grant select on table "public"."games" to "authenticated";

grant trigger on table "public"."games" to "authenticated";

grant truncate on table "public"."games" to "authenticated";

grant update on table "public"."games" to "authenticated";

grant delete on table "public"."games" to "service_role";

grant insert on table "public"."games" to "service_role";

grant references on table "public"."games" to "service_role";

grant select on table "public"."games" to "service_role";

grant trigger on table "public"."games" to "service_role";

grant truncate on table "public"."games" to "service_role";

grant update on table "public"."games" to "service_role";

grant delete on table "public"."login" to "anon";

grant insert on table "public"."login" to "anon";

grant references on table "public"."login" to "anon";

grant select on table "public"."login" to "anon";

grant trigger on table "public"."login" to "anon";

grant truncate on table "public"."login" to "anon";

grant update on table "public"."login" to "anon";

grant delete on table "public"."login" to "authenticated";

grant insert on table "public"."login" to "authenticated";

grant references on table "public"."login" to "authenticated";

grant select on table "public"."login" to "authenticated";

grant trigger on table "public"."login" to "authenticated";

grant truncate on table "public"."login" to "authenticated";

grant update on table "public"."login" to "authenticated";

grant delete on table "public"."login" to "service_role";

grant insert on table "public"."login" to "service_role";

grant references on table "public"."login" to "service_role";

grant select on table "public"."login" to "service_role";

grant trigger on table "public"."login" to "service_role";

grant truncate on table "public"."login" to "service_role";

grant update on table "public"."login" to "service_role";

grant delete on table "public"."posts" to "anon";

grant insert on table "public"."posts" to "anon";

grant references on table "public"."posts" to "anon";

grant select on table "public"."posts" to "anon";

grant trigger on table "public"."posts" to "anon";

grant truncate on table "public"."posts" to "anon";

grant update on table "public"."posts" to "anon";

grant delete on table "public"."posts" to "authenticated";

grant insert on table "public"."posts" to "authenticated";

grant references on table "public"."posts" to "authenticated";

grant select on table "public"."posts" to "authenticated";

grant trigger on table "public"."posts" to "authenticated";

grant truncate on table "public"."posts" to "authenticated";

grant update on table "public"."posts" to "authenticated";

grant delete on table "public"."posts" to "service_role";

grant insert on table "public"."posts" to "service_role";

grant references on table "public"."posts" to "service_role";

grant select on table "public"."posts" to "service_role";

grant trigger on table "public"."posts" to "service_role";

grant truncate on table "public"."posts" to "service_role";

grant update on table "public"."posts" to "service_role";

grant delete on table "public"."replies" to "anon";

grant insert on table "public"."replies" to "anon";

grant references on table "public"."replies" to "anon";

grant select on table "public"."replies" to "anon";

grant trigger on table "public"."replies" to "anon";

grant truncate on table "public"."replies" to "anon";

grant update on table "public"."replies" to "anon";

grant delete on table "public"."replies" to "authenticated";

grant insert on table "public"."replies" to "authenticated";

grant references on table "public"."replies" to "authenticated";

grant select on table "public"."replies" to "authenticated";

grant trigger on table "public"."replies" to "authenticated";

grant truncate on table "public"."replies" to "authenticated";

grant update on table "public"."replies" to "authenticated";

grant delete on table "public"."replies" to "service_role";

grant insert on table "public"."replies" to "service_role";

grant references on table "public"."replies" to "service_role";

grant select on table "public"."replies" to "service_role";

grant trigger on table "public"."replies" to "service_role";

grant truncate on table "public"."replies" to "service_role";

grant update on table "public"."replies" to "service_role";

grant delete on table "public"."user_bookmarks" to "anon";

grant insert on table "public"."user_bookmarks" to "anon";

grant references on table "public"."user_bookmarks" to "anon";

grant select on table "public"."user_bookmarks" to "anon";

grant trigger on table "public"."user_bookmarks" to "anon";

grant truncate on table "public"."user_bookmarks" to "anon";

grant update on table "public"."user_bookmarks" to "anon";

grant delete on table "public"."user_bookmarks" to "authenticated";

grant insert on table "public"."user_bookmarks" to "authenticated";

grant references on table "public"."user_bookmarks" to "authenticated";

grant select on table "public"."user_bookmarks" to "authenticated";

grant trigger on table "public"."user_bookmarks" to "authenticated";

grant truncate on table "public"."user_bookmarks" to "authenticated";

grant update on table "public"."user_bookmarks" to "authenticated";

grant delete on table "public"."user_bookmarks" to "service_role";

grant insert on table "public"."user_bookmarks" to "service_role";

grant references on table "public"."user_bookmarks" to "service_role";

grant select on table "public"."user_bookmarks" to "service_role";

grant trigger on table "public"."user_bookmarks" to "service_role";

grant truncate on table "public"."user_bookmarks" to "service_role";

grant update on table "public"."user_bookmarks" to "service_role";

grant delete on table "public"."user_likes" to "anon";

grant insert on table "public"."user_likes" to "anon";

grant references on table "public"."user_likes" to "anon";

grant select on table "public"."user_likes" to "anon";

grant trigger on table "public"."user_likes" to "anon";

grant truncate on table "public"."user_likes" to "anon";

grant update on table "public"."user_likes" to "anon";

grant delete on table "public"."user_likes" to "authenticated";

grant insert on table "public"."user_likes" to "authenticated";

grant references on table "public"."user_likes" to "authenticated";

grant select on table "public"."user_likes" to "authenticated";

grant trigger on table "public"."user_likes" to "authenticated";

grant truncate on table "public"."user_likes" to "authenticated";

grant update on table "public"."user_likes" to "authenticated";

grant delete on table "public"."user_likes" to "service_role";

grant insert on table "public"."user_likes" to "service_role";

grant references on table "public"."user_likes" to "service_role";

grant select on table "public"."user_likes" to "service_role";

grant trigger on table "public"."user_likes" to "service_role";

grant truncate on table "public"."user_likes" to "service_role";

grant update on table "public"."user_likes" to "service_role";

grant delete on table "public"."userinfo" to "anon";

grant insert on table "public"."userinfo" to "anon";

grant references on table "public"."userinfo" to "anon";

grant select on table "public"."userinfo" to "anon";

grant trigger on table "public"."userinfo" to "anon";

grant truncate on table "public"."userinfo" to "anon";

grant update on table "public"."userinfo" to "anon";

grant delete on table "public"."userinfo" to "authenticated";

grant insert on table "public"."userinfo" to "authenticated";

grant references on table "public"."userinfo" to "authenticated";

grant select on table "public"."userinfo" to "authenticated";

grant trigger on table "public"."userinfo" to "authenticated";

grant truncate on table "public"."userinfo" to "authenticated";

grant update on table "public"."userinfo" to "authenticated";

grant delete on table "public"."userinfo" to "service_role";

grant insert on table "public"."userinfo" to "service_role";

grant references on table "public"."userinfo" to "service_role";

grant select on table "public"."userinfo" to "service_role";

grant trigger on table "public"."userinfo" to "service_role";

grant truncate on table "public"."userinfo" to "service_role";

grant update on table "public"."userinfo" to "service_role";

create policy "Users can insert their own profile."
on "public"."userinfo"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "public profiles are viewed by everyone."
on "public"."userinfo"
as permissive
for select
to public
using (true);



